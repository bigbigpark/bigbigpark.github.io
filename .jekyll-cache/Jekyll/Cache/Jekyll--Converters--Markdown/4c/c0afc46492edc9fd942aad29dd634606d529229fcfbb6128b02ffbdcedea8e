I"O<p>기회는 준비된 자에게 온다 !</p>

<h2 id="시간-복잡도의-정의">시간 복잡도의 정의</h2>

<p>시간 복잡도(Time Complexity)란 알고리즘이 문제를 해결하기 위한 <strong>연산</strong>의 횟수다.</p>

<p>알고리즘을 평가할 때 2가지의 척도가 사용된다.</p>

<ul>
  <li><strong>Time Complexity</strong>: 수행 연산에 대항하는 <strong>시간 복잡도</strong></li>
  <li><strong>Space Complexity</strong>: 메모리 사용량에 해당하는 <strong>공간 복잡도</strong></li>
</ul>

<p>복잡도니까 낮을 수록 효율적인 알고리즘이겠지? 라는 생각을 해본다.</p>

<p>이를 정량적으로 표현하기 위해 빅오 표기법을 사용한다.</p>

<h2 id="빅오-표기법이란">빅오 표기법이란</h2>

<p>시간 복잡도의 경우 빅오(Big-O)로 표현한다.</p>

<p>통상 연산 횟수를 카운팅 할 때는 3가지를 사용한다.</p>

<ul>
  <li><strong>Best Case</strong>: 최선의 경우 -&gt; Big-Ω [빅-오메가]</li>
  <li><strong>Worst Case</strong>: 최악의 경우 -&gt; <strong>Big-O [빅-오]</strong></li>
  <li><strong>Average Case</strong>: 평균의 경우 -&gt;Big-θ [빅-세타]</li>
</ul>

<p>따라서 빅오 표기법이란 <strong>최악의 경우</strong>를 고려하여, 프로그램이 실행되는 과정에서 소요된 연산 횟수를 카운팅한다.</p>

<p><br /></p>

<h2 id="빅오-표기법의-종류">빅오 표기법의 종류</h2>

<p>아래는 자주 사용되는 빅오 표기법의 표와 그 그래프이다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">빅오 표기법</th>
      <th>표현</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">\(\mathbf{O}(1)\)</td>
      <td>상수</td>
      <td>프로그램에서 라인 한 개가 실행되는 경우</td>
    </tr>
    <tr>
      <td style="text-align: center">\(\mathbf{O}(logN)\)</td>
      <td>로그</td>
      <td>입력 데이터의 크기가 커질수록 처리 시간이 로그만큼 줄어 들 때, <strong>이진 탐색</strong>이 대표적, 재귀가 순기능으로 이루어질 때</td>
    </tr>
    <tr>
      <td style="text-align: center">\(\mathbf{O}(N)\)</td>
      <td>선형</td>
      <td>입력에 비례하여 처리 시간이 증가할 때. 즉, 반복문이 N번 반복할 때</td>
    </tr>
    <tr>
      <td style="text-align: center">\(\mathbf{O}(NlogN)\)</td>
      <td>로그 선형</td>
      <td>데이터가 많아질수록 로그배만큼 늘어나는 알고리즘. <strong>정렬 알고리즘 (퀵, 병합 정렬)</strong>이 대표적</td>
    </tr>
    <tr>
      <td style="text-align: center">\(\mathbf{O}(N^2)\)</td>
      <td>다항</td>
      <td>데이터가 많아질수록 처리 시간이 급수적으로 늘어날 때, <strong>이중 반복문</strong>이 대표적</td>
    </tr>
    <tr>
      <td style="text-align: center">\(\mathbf{O}(2^n)\)</td>
      <td>지수</td>
      <td>데이터량이 많아질수록 처리시간이 기하급수적으로 늘어나는 경우, <strong>피보나치 수열과 재귀</strong>가 역기능을 할 경우가 대표적</td>
    </tr>
  </tbody>
</table>

<p><img src="/assets/img/data_structure/2022-12-09/Selection_0000.png" alt="" /></p>

<p>여기서 N이란 입력되는 데이터의 개수를 의미한다 !</p>

<p><br /></p>

<h2 id="시간-복잡도-줄이는-법">시간 복잡도 줄이는 법</h2>

<p>적은 연산으로도 같은 동작을 하는 알고리즘이 효율적인 알고리즘이다.</p>

<p>시간 복잡도를 줄이기 위한 다양한 방법이 있다.</p>

<p>그 중 대표적인 방법은 <strong>1) 반복문의 사용을 줄이는 것</strong>과 <strong>2) 자료 구조를 적절히 사용하는 것</strong> 그리고 <strong>3) 알려진 알고리즘을 적절히 사용하는 것</strong>이다.</p>

<p><br /></p>

<h2 id="실행-시간-예측하기">실행 시간 예측하기</h2>

<p><img src="/assets/img/data_structure/2022-12-09/Selection_0001.png" alt="" /></p>

<p>고맙게도 좋은 테이블이 있다.</p>

<p>만약 컴퓨터가 1억 번의 연산을 하기 위해 1초가 걸린다고 가정을 하자.</p>

<h2 id="reference">Reference</h2>

<ul>
  <li><a href="https://thkim-study.tistory.com/29">[알고리즘] 복잡도란 무엇인가(시간복잡도, 공간복잡도, 빅오 표기법)</a></li>
  <li><a href="https://velog.io/@songa29/%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84%EB%9E%80">시간 복잡도란?</a></li>
  <li>
    <p><a href="https://hanamon.kr/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-time-complexity-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84/">[알고리즘] Time Complexity (시간 복잡도)</a></p>
  </li>
  <li>[<a href="https://coding-factory.tistory.com/609">[Algorithm] 알고리즘 공간복잡도에 대하여](https://coding-factory.tistory.com/609)</a></li>
</ul>
:ET