I"h<p>기회는 준비된 자에게 온다 !</p>

<h2 id="스택의-정의">스택의 정의</h2>

<p>스택(stack)은 무엇일까? 일반적으로 <a href="https://bigbigpark.github.io/data_structure/queue/">큐(queue)</a>와 많이 비교되곤 한다. 동작 방식이 반대이기 때문이다.</p>

<p>내가 생각할 때 <strong>프링글스 통</strong>이다.</p>

<p>먼저 집어 넣은 과자가 나중에 꺼내지게 된다.</p>

<p>따라서 늦게 들어간 자료가 먼저 출력되는 LIFO(Last In First Out) 형식의 자료구조다.</p>

<h2 id="큐의-개념">큐의 개념</h2>

<p>쉽게 생각해서 은행에 갔다고 생각하자.</p>

<p>번호표를 먼저 뽑은 사람이 업무를 먼저 보는 것이다. <del>(물론 VIP는 우선 순위 큐)</del></p>

<p>따라서 먼저 넣은 데이터가 먼저 출력되는 일명 FIFO(First In First Out) 구조로 데이터를 저장하는 자료 구조다.</p>

<h2 id="큐의-연산">큐의 연산</h2>

<p>앞선 모든 자료 구조에서는 4가지 동작 (읽기, 검색, 삽입, 삭제)의 기본 연산을 지원한다.</p>

<p>큐에서 많이 사용되는 메소드는 다음과 같다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">push()</code> : 큐에 원소를 삽입, 이 때 큐의 크기가 1 증가</li>
  <li><code class="language-plaintext highlighter-rouge">pop()</code> : 큐에서 제일 먼저 저장된 원소를 뺀다. 이 때 큐의 크기가 1 감소</li>
  <li><code class="language-plaintext highlighter-rouge">front()</code> : 큐에서 제일 먼저 저장된 원소를 반환한다. pop()은 원소 반환을 하지 않음</li>
  <li><code class="language-plaintext highlighter-rouge">empty()</code> : 큐가 비었는 지 검사하여 bool 값을 반환</li>
  <li><code class="language-plaintext highlighter-rouge">size()</code> : 현재 큐에 저장된 데이터의 개수를 반환</li>
</ul>

<h2 id="큐-사용법-c">큐 사용법 (C++)</h2>

<p>기본적인 선언은 아래와 같이 한다.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
</span>
<span class="n">std</span><span class="o">::</span><span class="n">queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">num_queue</span><span class="p">;</span>
</code></pre></div></div>

<p><br /></p>

<p>이렇게 되면 큐에 [3 6 9] 순서대로 입력이 된다.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">num_queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
<span class="n">num_queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
<span class="n">num_queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">9</span><span class="p">);</span>
</code></pre></div></div>

<p><br /></p>

<p>따라서 큐에 제일 먼저 들어간 순서대로 반환이 되는데,</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">auto</span> <span class="n">num</span> <span class="o">=</span> <span class="n">num_queue</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
<span class="n">num_queue</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"num: "</span> <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</code></pre></div></div>

<p>큐에서 <strong>단지</strong> 제일 앞에 저장된 데이터가 보고 싶을 때는 <code class="language-plaintext highlighter-rouge">front()</code>를 사용하지만, 그 데이터를 대기열에서 없애고 싶을 때는 <code class="language-plaintext highlighter-rouge">pop()</code> 해주는 것을 잊지 말자.</p>

<p><br /></p>

<p>큐는 <code class="language-plaintext highlighter-rouge">clear()</code> 기능이 없다.</p>

<p>그래서 일일히 없애줘야 한다.</p>

<h3 id="큐-clear-구현">큐 clear() 구현</h3>

<p>간단하다. 비어 있지 않으면? pop()을 계속 하자!</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">num_queue</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="n">num_queue</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</code></pre></div></div>

<h2 id="큐의-사용-사례">큐의 사용 사례</h2>

<p>FIFO 구조에서 알 수 있듯이 데이터가 입력된 시간 순서대로 처리해야 할 필요가 있는 순간에 사용된다.</p>

<p>예를 들어,</p>

<ul>
  <li>인쇄 대기열</li>
  <li>콜센터 고객 대기시간</li>
  <li>티켓팅 카운터</li>
  <li>(고급) 너비 우선 탐색(BFS, Breadth-First Search) 구현
    <ul>
      <li>처리해야할 노드 리스트를 저장할 때 큐 사용</li>
    </ul>
  </li>
</ul>

<h2 id="reference">Reference</h2>

<ul>
  <li><a href="https://gmlwjd9405.github.io/2018/08/02/data-structure-queue.html">[자료구조] 큐(Queue)란</a></li>
</ul>
:ET