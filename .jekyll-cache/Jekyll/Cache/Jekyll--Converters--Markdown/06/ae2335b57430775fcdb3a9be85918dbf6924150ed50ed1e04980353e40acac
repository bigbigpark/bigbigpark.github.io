I"<<p>코딩 테스트 문제를 풀다보면 STL을 많이 사용하게 된다. <br /></p>

<p>자주 사용하는 것들을 까먹지 않게 좀 정리해보았다. <br /></p>

<p>대부분의 경우 <code class="language-plaintext highlighter-rouge">std</code>라는 <code class="language-plaintext highlighter-rouge">namespace</code> 안에 속하는 녀석들인데, 앞으로 정리할 내용은 바로 밑의 선언이 되어 있다고 가정한다. <br /></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="1-vector">1. vector</h2>

<p>아래와 같이 선언되어 있다고 가정하자.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="c1"> // 이렇게 선언한다.</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<p>대부분의 자료 구조의 경우 4가지의 기본 연산이 있다. <br /></p>

<p>따라서 각 STL별 아래의 기준으로 정리한다. <br /></p>

<ul>
  <li>읽기(read)</li>
  <li>탐색(search)</li>
  <li>삽입(insert)</li>
  <li>삭제(delete)</li>
</ul>

<h3 id="a-탐색">A. 탐색</h3>

<p>vector 탐색을 위해서 <code class="language-plaintext highlighter-rouge">std::find</code>를 이용하며 두 가지 방법이 존재한다</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1. 반복자(iterator) 찾기</span>
<span class="k">auto</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">find</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="mi">178</span><span class="p">);</span>

<span class="c1">// 2. 인덱스(index) 찾기</span>
<span class="k">auto</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">find</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="mi">178</span><span class="p">)</span> <span class="o">-</span> <span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>

<span class="c1">// 만약에 없으면?</span>
<span class="k">if</span> <span class="p">(</span> <span class="n">std</span><span class="o">::</span><span class="n">find</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">,</span> <span class="mi">178</span><span class="p">())</span> <span class="o">==</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">()</span> <span class="p">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">std::find</code> 함수를 이용해서 찾게 되며, 해당 요소가 vector에 존재하지 않으면 <code class="language-plaintext highlighter-rouge">v.end()</code>를 반환한다.</p>

<p>이 함수의 반환값은 <strong>반복자</strong>이며, 해당 반복자에 해당하는 <strong>인덱스</strong>를 얻고 싶다면 첫 번째 반복자인 <code class="language-plaintext highlighter-rouge">v.begin()</code>를 빼주면 된다.</p>

<h3 id="b-삽입">B. 삽입</h3>

<p>삽입은 <code class="language-plaintext highlighter-rouge">insert()</code>를 이용하며 아래와 같이 삽입할 수 있다.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">v</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span> <span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="mi">100</span> <span class="p">);</span> <span class="c1">// 100을 제일 처음에 추가</span>
<span class="n">v</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span> <span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span><span class="o">+</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span> <span class="p">);</span> <span class="c1">// 5를 (처음+5)에 추가</span>
<span class="n">v</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="mi">9</span> <span class="p">);</span> <span class="c1">// 9를 제일 마지막에 추가</span>
</code></pre></div></div>

<h3 id="c-삭제">C. 삭제</h3>

<p>삭제는 <code class="language-plaintext highlighter-rouge">erase()</code>를 이용하며 아래와 같이 삭제할 수 있다.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">v</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span> <span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="p">);</span> <span class="c1">// 제일 첫 번째 원소 제거</span>
<span class="n">v</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span> <span class="p">);</span> <span class="c1">// 마지막에서 한 칸 앞에 원소 제거</span>
</code></pre></div></div>

<h2 id="2-map">2. map</h2>

<p><code class="language-plaintext highlighter-rouge">&lt;map&gt;</code> 정말 많이 사용한다. <br /></p>

<p>전화번호부, 메뉴판과 같이 <strong>이름-전화번호</strong> 혹은 <strong>메뉴-가격</strong> 이렇게 <strong>key-value</strong>로 표현할 수 있을 때.</p>

<p>또한 투표소에서 누가 투표를 안 했는가?에 대한 문제도 손쉽게 풀 수 있다. <br /></p>

<p>그 기본 자료 구조는 해시 테이블(hash table) 또는 트리(tree)인데 조금더 자세히 보고 싶다면 <a href="https://bigbigpark.github.io/data_structure/hash_table/">여기</a>를 참고하자.</p>

<p><br /></p>

<p>선언은 아래와 같이 해준다. 설명은 주석을 참고하자. <br /></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;map&gt;</span><span class="cp">
</span>
<span class="c1">// 또는</span>

<span class="cp">#include</span> <span class="cpf">&lt;unordered_map&gt;</span><span class="c1"> // 필자는 이걸 더 선호한다.</span><span class="cp">
</span>
<span class="cm">/*
  사용하는 곳 안에서 (대게 main문)
  key-value의 쌍(pair)로 선언해야 하므로 2가지를 &lt;&gt; 안에 넣어줘야 한다.
*/</span>
<span class="n">unordered_map</span><span class="o">&lt;</span><span class="n">string</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">um</span><span class="p">;</span>
<span class="n">um</span><span class="p">[</span><span class="s">"bigbigpark"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1234</span><span class="p">;</span>   <span class="c1">// 문자열 bigbigpark이라는 key에 저장된 value는 정수형 1234이다.</span>
</code></pre></div></div>

<h3 id="a-탐색-1">A. 탐색</h3>

<p>탐색은 <code class="language-plaintext highlighter-rouge">find</code> 메소드를 이용해준다. <br /></p>

<p>위에 vector는 <code class="language-plaintext highlighter-rouge">std::find</code>를 이용해주었다. 차이점을 주의하자. <br /></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span> <span class="n">um</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">"bigbigpark"</span><span class="p">)</span> <span class="o">!=</span> <span class="n">um</span><span class="p">.</span><span class="n">end</span><span class="p">()</span> <span class="p">)</span> <span class="c1">// 찾지 못한다면 end()를 반환</span>

<span class="c1">// 만약 찾았으면?</span>
<span class="cm">/*
  앞서 말했다시피 map 자료구조는 key-value 두 가지로 구성되어 있다.
  따라서 찾았을 때 두 가지 모두 접근이 가능하다.
*/</span>
<span class="k">auto</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">um</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">"bigbigpark"</span><span class="p">);</span>

<span class="k">auto</span> <span class="n">key</span>   <span class="o">=</span> <span class="n">iter</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">;</span>  <span class="c1">// key에 접근한다. -&gt; 문자열 bigbigpark 반환.</span>
<span class="k">auto</span> <span class="n">value</span> <span class="o">=</span> <span class="n">iter</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">;</span> <span class="c1">// value에 접근한다. -&gt; 정수형 1234 반환.</span>
</code></pre></div></div>

<h3 id="b-삽입-1">B. 삽입</h3>

<p>여러 방법이 있지만 나는 아래와 같이 그냥 넣는다.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">um</span><span class="p">[</span><span class="s">"Eric"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">9999</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="c-삭제-1">C. 삭제</h3>

<p>key를 기준으로 삭제한다. <br /></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">um</span><span class="p">.</span><span class="n">erase</span><span class="p">[</span><span class="s">"Amanda"</span><span class="p">];</span> <span class="c1">// 없으면 um.end()를 반환한다.</span>
</code></pre></div></div>

<h3 id="d-반복문-순회">D. 반복문 순회</h3>

<p>예를 들어보자. <br /></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// vector의 경우 아래와 같이 반복문을 순회하며 값에 접근이 가능하다.</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
<span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">n</span><span class="o">:</span> <span class="n">v</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// map의 경우 어떨까?</span>
<span class="n">unordered_map</span><span class="o">&lt;</span><span class="n">string</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">um</span><span class="p">;</span>
<span class="n">um</span><span class="p">[</span><span class="s">"A"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1111</span><span class="p">;</span>
<span class="n">um</span><span class="p">[</span><span class="s">"B"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2222</span><span class="p">;</span>

<span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">it</span><span class="o">:</span> <span class="n">um</span><span class="p">)</span>
<span class="p">{</span>
  <span class="c1">// key-value의 특성에 따라 접근하면 된다.</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"key  : "</span> <span class="o">&lt;&lt;</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">first</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span> <span class="c1">// 문자열 A, B 출력</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"value: "</span> <span class="o">&lt;&lt;</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span> <span class="c1">// 정수형 1111, 2222 출력</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="3-문자열string">3. 문자열(string)</h2>

<p>C++.. 문자열 정말 많이 나오는 것 같다. <br /></p>

<p>정수 입력을 받을 때 99999999999999999같은 숫자도 string으로 입력 받으면 큰 수도 효율적으로 처리 가능하다.</p>

<p><br /></p>

<p>보통 아래와 같이 선언한다.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span>
<span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"bigbigpark"</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="a-찾기">A. 찾기</h3>

<p><code class="language-plaintext highlighter-rouge">find</code>메소드를 사용하긴 하지만 찾지 못하였을 때 <strong>반환값이 다름</strong>에 주의하자. <br /></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

</code></pre></div></div>
:ET