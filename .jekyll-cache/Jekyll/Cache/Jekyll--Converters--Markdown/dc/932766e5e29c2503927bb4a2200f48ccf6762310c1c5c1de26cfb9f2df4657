I"u<p>C++로 수학적 표현을 다루다보면 행렬 표현을 피할 수 없다 <br />
보통 Eigen 라이브러리를 이용하여 많이들 표현하는데, 이 때 Rotation과 Translation이 담긴 Transformation matrix를 많이 사용한다. <br />
기본적으로 4x4 행렬이며 상호 변환해서 사용하는 법을 알아보자 <br />
더불어 Eigen의 block 기능을 이용하여 구현해본다 <br /></p>

<p><br /></p>

<h2 id="geometry_msgspose---eigenmatrix4d">Geometry_msgs/Pose -&gt; Eigen::Matrix4d</h2>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Input : (geometry_msgs::Pose pose)</span>
<span class="n">Eigen</span><span class="o">::</span><span class="n">Matrix4d</span> <span class="n">xpose</span> <span class="o">=</span> <span class="n">Eigen</span><span class="o">::</span><span class="n">Matrix4d</span><span class="o">::</span><span class="n">Identity</span><span class="p">();</span>
<span class="n">xpose</span><span class="p">.</span><span class="n">block</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">Eigen</span><span class="o">::</span><span class="n">Quaterniond</span><span class="p">(</span><span class="n">quat</span><span class="p">.</span><span class="n">w</span><span class="p">(),</span> <span class="n">quat</span><span class="p">.</span><span class="n">x</span><span class="p">(),</span> <span class="n">quat</span><span class="p">.</span><span class="n">y</span><span class="p">(),</span> <span class="n">quat</span><span class="p">.</span><span class="n">z</span><span class="p">()).</span><span class="n">normalized</span><span class="p">().</span><span class="n">toRotationMatrix</span><span class="p">();</span>
<span class="n">xpose</span><span class="p">.</span><span class="n">block</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="o">=</span> <span class="n">Eigen</span><span class="o">::</span><span class="n">Vector3d</span><span class="p">(</span><span class="n">pose</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">pose</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">pose</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">z</span><span class="p">);</span>
</code></pre></div></div>

<p><br /></p>

<p>반대로 <br /></p>

<p><br /></p>

<h2 id="eigenmatrix4d---geometry_msgspose">Eigen::Matrix4d -&gt; geometry_msgs/Pose</h2>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Input : Eigen::Matrix4d xpose)</span>
<span class="n">geometry_msgs</span><span class="o">::</span><span class="n">Pose</span> <span class="n">pose</span><span class="p">;</span>

<span class="n">Eigen</span><span class="o">::</span><span class="n">Quaterniond</span> <span class="nf">q</span><span class="p">(</span><span class="n">xpose</span><span class="p">.</span><span class="n">block</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
<span class="n">pose</span><span class="p">.</span><span class="n">orientation</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">x</span><span class="p">();</span>
<span class="n">pose</span><span class="p">.</span><span class="n">orientation</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">y</span><span class="p">();</span>
<span class="n">pose</span><span class="p">.</span><span class="n">orientation</span><span class="p">.</span><span class="n">z</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">z</span><span class="p">();</span>
<span class="n">pose</span><span class="p">.</span><span class="n">orientation</span><span class="p">.</span><span class="n">w</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">w</span><span class="p">();</span>

<span class="n">pose</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">xpose</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
<span class="n">pose</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">xpose</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
<span class="n">pose</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">z</span> <span class="o">=</span> <span class="n">xpose</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="reference">Reference</h2>
<ul>
  <li><a href="https://github.com/LimHyungTae/Eigen_for_Robotics">“Pose Conversion Package for ROS”</a></li>
</ul>
:ET