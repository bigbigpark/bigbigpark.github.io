I"<p>기회는 준비된 자에게 온다 !</p>

<h2 id="연결-리스트의-정의">연결 리스트의 정의</h2>

<p>연결 리스트(Linked List)란 말 그대로 리스트가 연결되어 있는 것을 뜻한다.</p>

<p>그림으로 표현하면 아래와 같으며, 여러 개의 Node가 서로 연결되어 있는 형태이다.</p>

<p>배열과 달리 실제로 메모리 공간서 서로서로 떨어져 있는 데이터를 링크(포인터)를 이용하여 연결 시켜 리스트 형태로 구현한 것이다.</p>

<h3 id="단순-연결-리스트-예시">단순 연결 리스트 예시</h3>

<p>여기서 리스트의 가장 첫 번째에 위치한 노드를 <strong>Head</strong>, 끝에 위치한 노드를 <strong>Tail</strong>이라고 부른다.</p>

<p>각 노드는 데이터(data)와 링크(link)라는 2가지 속성을 가진다.</p>

<ul>
  <li>data: 노드에 저장된 데이터 값 (ex. 아래 그림에서 9, 17, 11)</li>
  <li>link: 연결된 다음 노드 주소 (ex. 아래 그림에서 화살표)</li>
</ul>

<p>여기서 Tail 노드의 다음 노드는 Nullptr을 가리키고 있다.</p>

<p><img src="/assets/img/data_structure/2022-12-08/Selection_001.png" alt="" /></p>

<p><br /></p>

<p>단순 연결리스트 말고 아래의 두 가지 연결 리스트가 존재한다.</p>

<h3 id="원형-연결-리스트circular-linked-list">원형 연결 리스트(Circular Linked List)</h3>

<p>원형 연결 리스트의 경우 tail 노드의 다음 노드가 제일 첫 번째 리스트를 가리키게 하여 순환되는 구조를 갖고 있다.</p>

<p><img src="/assets/img/data_structure/2022-12-08/Selection_002.png" alt="" /></p>

<h3 id="이중-연결-리스트-doulbe-linked-list">이중 연결 리스트 (Doulbe Linked List)</h3>

<p>노드의 방향성을 없애고 한 노드에서 언제든 직전 노드로 이동이 가능하며, 위의 원형 연결 리스트와 통합할 수 있다.</p>

<p><img src="/assets/img/data_structure/2022-12-08/Selection_003.png" alt="" /></p>

<h2 id="배열과-비교">배열과 비교</h2>

<ul>
  <li>읽기(reading) 속도는 배열이 리스트보다 빠르다. 왜냐하면 배열은 인덱스만 있으면 O(1)에 가능하지만, 리스트는 최소 한번 순회를 거쳐야 하기 때문에 O(n)이 걸린다.</li>
  <li>삽입(insertion)과 삭제(delete) 속도는 리스트가 배열보다 빠르다.
    <ul>
      <li>리스트는 중간에 데이터를 삽입하게 되면 양옆 노드의 링크 정보만 변경하면 된다.</li>
    </ul>
  </li>
</ul>

<h2 id="연결-리스트의-장점">연결 리스트의 장점</h2>

<ul>
  <li>링크로써 구현되기 때문에, 자료의 삽입 및 삭제가 용이하다.</li>
  <li>필요할때만 삽입과 삭제를 할 수 있기 때문에 배열처럼 최대 원소 개수 지정이 필요없다.</li>
</ul>

<h2 id="연결-리스트의-단점">연결 리스트의 단점</h2>

<ul>
  <li>원하는 원소를 찾는 과정 (searching)에서 포인터로 모든 노드를 순회해야 하기 때문에 탐색 비용이 높다.</li>
  <li>구현이 어렵다.</li>
</ul>

<h2 id="연결-리스트-구현c">연결 리스트 구현(C++)</h2>

<h2 id="reference">Reference</h2>

<ul>
  <li><a href="https://leejinseop.tistory.com/4">[자료구조] 연결 리스트(Linked List) 개념과 구현</a></li>
  <li><a href="https://lamarr.dev/datastructure/2020/04/02/01-linked-list.html">연결 리스트(Linked list) 개념정리</a></li>
  <li>
    <p><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=tjsrudv&amp;logNo=221055137174">[자료구조] 배열 리스트와 연결 리스트의 차이 (장단점)</a></p>
  </li>
  <li><a href="https://velog.io/@kon6443/Data-Structure-C-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Linked-list">[Data Structure] C++ / 자료구조 / Linked list</a></li>
</ul>
:ET